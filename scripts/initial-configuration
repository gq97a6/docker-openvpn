#!/bin/bash

# Mute non-error output
exec > /dev/null

DF="/etc/openvpn"

# Check if data folder is empty
if [ -d "$DF" ] && [ "$(ls -A "$DF")" ]; then
	echo "Error: Data folder ($DF) is not empty!" >&2
	exit 1
fi

mkdir -p $DF/ccd
mkdir -p $DF/easy-rsa/
mkdir -p $DF/client-certs

cd $DF/easy-rsa/ || return
echo "set_var EASYRSA_ALGO ec" > vars
echo "set_var EASYRSA_CURVE prime256v1" >> vars

# Generate a random, alphanumeric identifier of 16 characters for CN and one for server name
SERVER_CN="cn_$(head /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 16 | head -n 1)"
echo "$SERVER_CN" > SERVER_CN_GENERATED

SERVER_NAME="server_$(head /dev/urandom | tr -dc 'a-zA-Z0-9' | fold -w 16 | head -n 1)"
echo "$SERVER_NAME" > SERVER_NAME_GENERATED

# Create the PKI, set up the CA and the server certificate
/usr/share/easy-rsa/easyrsa init-pki
EASYRSA_BATCH=1 EASYRSA_REQ_CN="$SERVER_CN" EASYRSA_VARS_FILE="$DF/easy-rsa/vars" /usr/share/easy-rsa/easyrsa build-ca nopass
EASYRSA_BATCH=1 EASYRSA_CERT_EXPIRE=3650 EASYRSA_VARS_FILE="$DF/easy-rsa/vars" /usr/share/easy-rsa/easyrsa build-server-full "$SERVER_NAME" nopass
EASYRSA_CRL_DAYS=3650 EASYRSA_VARS_FILE="$DF/easy-rsa/vars" /usr/share/easy-rsa/easyrsa gen-crl

openvpn --genkey secret $DF/tls-crypt.key

# Move all the generated files
cp pki/ca.crt pki/private/ca.key "pki/issued/$SERVER_NAME.crt" "pki/private/$SERVER_NAME.key" $DF/easy-rsa/pki/crl.pem $DF

# Make cert revocation list readable for non-root
chmod 644 $DF/crl.pem

# Create server config file
echo "port $PORT
proto $PROTOCOL
dev tun
user nobody
group nogroup
persist-key
persist-tun
keepalive 10 120
topology subnet
server $SUBNET_IP $SUBNET_MASK
ifconfig-pool-persist ipp.txt

#Either tell clients to redirect all traffic through VPN excluding DHCP and push DNS configuration
push \"redirect-gateway def1 bypass-dhcp\"
push \"dhcp-option DNS 1.0.0.1\"
push \"dhcp-option DNS 1.1.1.1\"

#Or tell clients to route only specified subnet (comment three previous lines)
#push \"route $SUBNET_IP $SUBNET_MASK\"

dh none
ecdh-curve prime256v1
tls-crypt tls-crypt.key
crl-verify crl.pem
ca ca.crt
cert $SERVER_NAME.crt
key $SERVER_NAME.key
auth SHA256
cipher AES-128-GCM
ncp-ciphers AES-128-GCM
tls-server
tls-version-min 1.2
tls-cipher TLS-ECDHE-ECDSA-WITH-AES-128-GCM-SHA256
client-config-dir $DF/ccd
status /var/log/openvpn/status.log
tun-mtu 1400
mssfix 1360
verb 3" >> $DF/server.conf

# Create client config template
echo "client" > $DF/client-template.txt

if [[ $PROTOCOL == 'udp' ]]; then
	echo "proto udp" >> $DF/client-template.txt
	echo "explicit-exit-notify" >> $DF/client-template.txt
elif [[ $PROTOCOL == 'tcp' ]]; then
	echo "proto tcp-client" >> $DF/client-template.txt
fi

echo "remote $PUBLIC_IP $PORT
dev tun
resolv-retry infinite
nobind
persist-key
persist-tun
remote-cert-tls server
verify-x509-name $SERVER_NAME name
auth SHA256
auth-nocache
cipher AES-128-GCM
tls-client
tls-version-min 1.2
tls-cipher TLS-ECDHE-ECDSA-WITH-AES-128-GCM-SHA256
ignore-unknown-option block-outside-dns
setenv opt block-outside-dns
tun-mtu 1400
mssfix 1360
verb 3" >> $DF/client-template.txt
